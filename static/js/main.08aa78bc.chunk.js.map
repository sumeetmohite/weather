{"version":3,"sources":["api/fetchWeather.js","App.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","process","data","App","useState","setQuery","weather","setWeather","date","setDate","cardBg","setCardBg","search","e","key","console","log","now","moment","dt","format","time","Date","getHours","main","motion","div","className","style","background","type","placeholder","value","onChange","target","onKeyPress","animate","rotateZ","name","sys","country","Math","round","temp","src","icon","alt","description","fontSize","feels_like","wind","speed","ReactDOM","render","document","getElementById"],"mappings":"wOAKaA,EAAY,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEACDC,IAAMC,IAJrB,kDAI8B,CAClCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,SACPC,MAPIC,sCAEY,uBAChBC,EADgB,EAChBA,KADgB,kBAQjBA,GARiB,2CAAH,sD,wBCmFVC,EAlFH,WAAO,IAAD,EAEWC,mBAAS,IAFpB,mBAERX,EAFQ,KAEDY,EAFC,OAGeD,mBAAS,IAHxB,mBAGRE,EAHQ,KAGCC,EAHD,OAISH,mBAAS,IAJlB,mBAIRI,EAJQ,KAIFC,EAJE,OAKaL,mBAAS,IALtB,mBAKRM,EALQ,KAKAC,EALA,KAQRC,EAAM,uCAAG,WAAMC,GAAN,mBAAAnB,EAAA,yDACE,UAAVmB,EAAEC,IADM,iCAEYtB,EAAaC,GAFzB,OAEDS,EAFC,OAGPK,EAAWL,GACXa,QAAQC,IAAId,GACRe,EAAMC,IAAe,IAARhB,EAAKiB,IAASC,OAAO,wBACtCX,EAAQQ,GAERI,GADIA,EAAO,IAAIC,KAAa,IAARpB,EAAKiB,KACbI,WACZR,QAAQC,IAAIK,GAEe,SAAxBnB,EAAKI,QAAQ,GAAGkB,MACfb,EAAU,wDAEa,gBAAxBT,EAAKI,QAAQ,GAAGkB,MACfb,EAAU,+CAEa,WAAxBT,EAAKI,QAAQ,GAAGkB,MACfb,EAAU,+CAEa,QAAxBT,EAAKI,QAAQ,GAAGkB,MAChBb,EAAU,+CAEc,QAAxBT,EAAKI,QAAQ,GAAGkB,MACfb,EAAU,+CAEa,UAAxBT,EAAKI,QAAQ,GAAGkB,MACfb,EAAU,+CAGdN,EAAS,IA9BF,4CAAH,sDAkCZ,OACI,cAACoB,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAiBC,MAAO,CAACC,WAAW,GAAD,OAAInB,IAA7D,SAGI,sBAAKiB,UAAU,mBAAf,UACI,uBAAOG,KAAK,OAAOH,UAAU,SAASI,YAAY,iBAAiBC,MAAOvC,EAAOwC,SAAU,SAACpB,GAAD,OAAOR,EAASQ,EAAEqB,OAAOF,QAAQG,WAAYvB,IAC3IN,EAAQkB,MACN,eAACC,EAAA,EAAOC,IAAR,CAAYC,UAAU,OAAOS,QAAS,CAACC,QAAQ,KAA/C,UACI,4BAAI7B,IACJ,qBAAImB,UAAU,YAAd,UACI,+BAAOrB,EAAQgC,OACf,8BAAMhC,EAAQiC,IAAIC,aAErB,sBAAKb,UAAU,YAAf,UACKc,KAAKC,MAAMpC,EAAQkB,KAAKmB,MACzB,2CAEJ,sBAAKhB,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAYiB,IAAG,4CAAuCtC,EAAQA,QAAQ,GAAGuC,KAA1D,WAAyEC,IAAKxC,EAAQA,QAAQ,GAAGyC,cAC/H,mBAAGnB,MAAO,CAACoB,SAAS,WAApB,SAAiC1C,EAAQA,QAAQ,GAAGyC,iBAExD,sBAAKpB,UAAU,aAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,sCACA,8BAAIc,KAAKC,MAAMpC,EAAQkB,KAAKyB,YAAY,8CAE5C,sBAAKtB,UAAU,gBAAf,UACI,qCACA,8BAAIc,KAAKC,MAAM,IAACpC,EAAQ4C,KAAKC,OAA7B,0BCxE5BC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.08aa78bc.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = process.env.REACT_APP_WEATHER_API;\n\nexport const fetchWeather = async(query) => {\n    const { data } = await axios.get(URL, {\n        params: {\n            q: query,\n            units: 'metric',\n            APPID: API_KEY,\n        }\n    });\n    return data;\n}","import React, {useState} from 'react';\nimport {motion} from 'framer-motion';\nimport './App.css';\nimport {fetchWeather} from './api/fetchWeather';\nimport moment from 'moment';\n\nconst App = () => {\n\n    const[query, setQuery] = useState('');\n    const[weather, setWeather] = useState('');\n    const[date, setDate] = useState('');\n    const[cardBg, setCardBg] = useState('');\n\n\n    const search = async(e) => {\n        if(e.key === 'Enter'){\n            const data = await fetchWeather(query);\n            setWeather(data);\n            console.log(data);\n            let now = moment(data.dt*1000).format('MMMM Do YYYY, h:mm a');\n            setDate(now)\n            let time = new Date(data.dt*1000)\n            time = time.getHours();\n            console.log(time)\n\n            if(data.weather[0].main == 'Clear'){\n                setCardBg('linear-gradient(to right, #2980b9, #6dd5fa, #ffffff)')\n            }\n            if(data.weather[0].main == 'Thunderstorm'){\n                setCardBg('linear-gradient(to right, #659999, #f4791f)')\n            }\n            if(data.weather[0].main == 'Drizzle'){\n                setCardBg('linear-gradient(to right, #2c3e50, #3498db)')\n            }\n            if(data.weather[0].main == 'Rain'){\n               setCardBg('linear-gradient(to right, #1a2980, #26d0ce)')\n            }\n            if(data.weather[0].main == 'Snow'){\n                setCardBg('linear-gradient(to right, #403b4a, #e7e9bb)')\n            }\n            if(data.weather[0].main == 'Clouds'){\n                setCardBg('linear-gradient(to right, #bdc3c7, #2c3e50)')\n            }\n            \n            setQuery('');\n        }\n    }\n    \n    return (\n        <motion.div className='main-container' style={{background:`${cardBg}`}}\n            \n        >\n            <div className=\"widget-container\" >\n                <input type='text' className='search' placeholder='Search city...' value={query} onChange={(e) => setQuery(e.target.value)} onKeyPress={search} />\n           { weather.main && (\n               <motion.div className='city' animate={{rotateZ:360 }}>\n                   <p>{date}</p>\n                   <h2 className='city-name'>\n                       <span>{weather.name}</span>\n                       <sup>{weather.sys.country}</sup>\n                   </h2>\n                    <div className='city-temp'>\n                        {Math.round(weather.main.temp)}\n                        <sup>&deg;C</sup>\n                    </div>\n                    <div className='info'>\n                        <img className='city-icon' src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description}/>\n                        <p style={{fontSize:\"1.25rem\"}}>{weather.weather[0].description}</p>\n                    </div>\n                    <div className='bottom-row'>\n                        <div className='bottom-column'>\n                            <p>Feels</p>\n                            <p>{Math.round(weather.main.feels_like)}<sup>&deg;c</sup></p> \n                        </div>\n                        <div className='bottom-column'>\n                            <p>Wind</p>\n                            <p>{Math.round((weather.wind.speed)*(18/5))} km/h</p>\n                        </div>\n                    </div>\n\n               </motion.div>\n           )\n           }\n            </div>\n        </motion.div>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n"],"sourceRoot":""}